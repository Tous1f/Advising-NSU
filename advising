Yes, here are all the courses and sections from the provided images, organized into a single table.



| Course | Section | Faculty | Time | Days | Seats |

| :--- | :--- | :--- | :--- | :--- | :--- |

| ENG111 | 1 | KSS | 04:20 PM - 05:50 PM | ST | 35 |

| ENG111 | 2 | LMh | 04:20 PM - 05:50 PM | ST | 40 |

| ENG111 | 3 | FTN | 08:00 AM - 09:30 AM | MW | 35 |

| ENG111 | 4 | NSj | 08:00 AM - 09:30 AM | MW | 40 |

| ENG111 | 5 | MNK | 09:40 AM - 11:10 AM | MW | 35 |

| ENG111 | 6 | NSj | 09:40 AM - 11:10 AM | MW | 40 |

| ENG111 | 7 | MNK | 11:20 AM - 12:50 PM | MW | 35 |

| ENG111 | 8 | NCA | 02:40 PM - 04:10 PM | MW | 35 |

| ENG111 | 9 | NCA | 04:20 PM - 05:50 PM | MW | 35 |

| ENG111 | 10 | KSS | 04:20 PM - 05:50 PM | MW | 35 |

| ENG111 | 11 | TAA | 11:20 AM - 12:50 PM | RA | 40 |

| ENG111 | 12 | TAA | 01:00 PM - 02:30 PM | RA | 40 |

| ENG111 | 13 | SZn | 02:40 PM - 04:10 PM | RA | 40 |

| ENG111 | 14 | SZn | 04:20 PM - 05:50 PM | RA | 40 |

| ENG111 | 15 | FzM | 04:20 PM - 05:50 PM | MW | 40 |

| ENG111 | 16 | FJN | 04:20 PM - 05:50 PM | ST | 35 |

| CSE373 | 1 | SfM1 | 11:20 AM - 12:50 PM | ST | 30 |

| CSE373 | 2 | ARa2 | 09:40 AM - 11:10 AM | MW | 35 |

| CSE373 | 3 | STI | 01:00 PM - 02:30 PM | MW | 35 |

| CSE373 | 4 | STI | 01:00 PM - 02:30 PM | ST | 35 |

| CSE373 | 5 | IqN | 08:00 AM - 09:30 AM | MW | 35 |

| CSE373 | 6 | IqN | 01:00 PM - 02:30 PM | MW | 35 |

| CSE373 | 7 | QISD | 04:20 PM - 05:50 PM | ST | 35 |

| CSE373 | 8 | SMAH | 08:00 AM - 09:30 AM | RA | 35 |

| CSE373 | 9 | SMAH | 09:40 AM - 11:10 AM | RA | 35 |

| CSE373 | 10 | EKD | 08:00 AM - 09:30 AM | ST | 35 |

| CSE373 | 11 | EKD | 09:40 AM - 11:10 AM | ST | 35 |

| CSE373 | 12 | ARa2 | 02:40 PM - 04:10 PM | MW | 35 |

| CSE373 | 13 | STL | 09:40 AM - 11:10 AM | MW | 35 |

| EEE111 | 1 | Aqu | 09:40 AM - 11:10 AM | MW | 35 |

| EEE111 | 2 | RTK | 11:20 AM - 12:50 PM | ST | 35 |

| EEE111 | 3 | MKL | 01:00 PM - 02:30 PM | ST | 35 |

| EEE111 | 4 | JSA | 11:20 AM - 12:50 PM | MW | 35 |

| EEE111 | 5 | JSA | 02:40 PM - 04:10 PM | MW | 35 |

| EEE111 | 6 | SSH1 | 01:00 PM - 02:30 PM | ST | 35 |

| EEE111 | 7 | SSH1 | 02:40 PM - 04:10 PM | ST | 35 |

| EEE111 | 9 | SvS | 11:20 AM - 12:50 PM | RA | 35 |

| EEE111 | 10 | MFY | 04:20 PM - 05:50 PM | ST | 35 |

| EEE111 | 11 | KSE | 08:00 AM - 09:30 AM | ST | 35 |

| EEE111 | 12 | SMU1 | 08:00 AM - 09:30 AM | RA | 35 |

| EEE111 | 13 | AKAZ | 11:20 AM - 12:50 PM | RA | 35 |

| EEE111 | 14 | AKAZ | 01:00 PM - 02:30 PM | RA | 35 |

| EEE111 | 15 | SMU1 | 09:40 AM - 11:10 AM | RA | 35 |

| EEE111 | 16 | HAI | 08:00 AM - 09:30 AM | RA | 35 |

| EEE111 | 17 | NaNR | 11:20 AM - 12:50 PM | MW | 35 |

| EEE111L | 1 | Aqu | 02:40 PM - 05:50 PM | T | 35 |

| EEE111L | 2 | RTK | 02:40 PM - 05:50 PM | S | 35 |

| EEE111L | 3 | MKL | 08:00 AM - 11:10 AM | R | 35 |

| EEE111L | 4 | JSA | 08:00 AM - 11:10 AM | M | 35 |

| EEE111L | 5 | JSA | 08:00 AM - 11:10 AM | W | 35 |

| EEE111L | 6 | SSH1 | 08:00 AM - 11:10 AM | S | 35 |

| EEE111L | 7 | SSH1 | 08:00 AM - 11:10 AM | T | 35 |

| EEE111L | 9 | SvS | 11:20 AM - 02:30 PM | W | 35 |

| EEE111L | 10 | MFY | 11:20 AM - 02:30 PM | S | 35 |

| EEE111L | 11 | KSE | 11:20 AM - 02:30 PM | T | 35 |

| EEE111L | 12 | SMU1 | 11:20 AM - 02:30 PM | A | 35 |

| EEE111L | 13 | AKAZ | 08:00 AM - 11:10 AM | R | 35 |

| EEE111L | 14 | AKAZ | 08:00 AM - 11:10 AM | A | 35 |

| EEE111L | 15 | SMU1 | 02:40 PM - 05:50 PM | A | 30 |

| EEE111L | 16 | HAI | 11:20 AM - 02:30 PM | A | 30 |

| EEE111L | 17 | NaNR | 02:40 PM - 05:50 PM | M | 30 |

| CSE273 | 1 | ARa2 | 09:40 AM - 11:10 AM | ST | 35 |

| CSE273 | 2 | ARa2 | 11:20 AM - 12:50 PM | ST | 35 |

| CSE273 | 3 | MKN1 | 09:40 AM - 11:10 AM | RA | 35 |

| CSE273 | 4 | MMK1 | 08:00 AM - 09:30 AM | ST | 35 |

| CSE273 | 5 | MMK1 | 09:40 AM - 11:10 AM | ST | 35 |

| CSE273 | 6 | TBA | 11:20 AM - 12:50 PM | RA | 0 |

| CSE323 | 1 | NvA | 09:40 AM - 11:10 AM | MW | 35 |

| CSE323 | 2 | NvA | 11:20 AM - 12:50 PM | MW | 35 |

| CSE323 | 3 | RMz1 | 08:00 AM - 09:30 AM | RA | 35 |

| CSE323 | 4 | RMz1 | 11:20 AM - 12:50 PM | RA | 35 |

| CSE323 | 5 | MUA3 | 08:00 AM - 09:30 AM | RA | 35 |

| CSE323 | 6 | MUA3 | 09:40 AM - 11:10 AM | RA | 35 |

| CSE323 | 7 | TBA | 01:00 PM - 02:30 PM | RA | 35 |

| CSE323 | 8 | TBA | 02:40 PM - 04:10 PM | RA | 35 |

| CSE323 | 9 | TBA | 08:00 AM - 09:30 AM | ST | 35 |

| CSE323 | 10 | TBA | 01:00 PM - 02:30 PM | ST | 35 |



I wanna take 4 days classes , for Eng111 I wanna take Nca , Ftn , for cse373 I wanna take Sfm1 , Smah , STI,  Ekd , for EEE111 I normally prefer Rtk , Svs , MFY,  for cse273 I prefer  mkn1 , mmk1, for cse 323 I prefer Mua3 and rmz1. now make me multiple advising plans ( possibly all combinations of advising plans) each in diffrent charts showing course name , day , time faculty with all these informations, also after thet, skip my preferences choose those plans that my university classes will be completed 4 days in a week , and 5 days in a week as well.   EEE111 lab course must be from the same section as its corresponding theory class. make an app for this with very minimul UI



I can help you with that! I've created a simple web app that can generate all the possible advising plans based on the course data and your preferences.

This app has two main functions:

Preferred Schedules: It finds all possible schedules that align with your specified faculty preferences.

Flexible Schedules: It finds schedules that fit into either a 4-day or 5-day week, ignoring your preferences to provide a wider range of options.

You can use the buttons to see the different schedule combinations. All the course data you provided is already built into the app.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advising Plan Generator</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
            color: #1f2937;
        }
    </style>
</head>
<body class="p-6">
    <div class="max-w-4xl mx-auto bg-white p-8 rounded-lg shadow-xl">
        <h1 class="text-3xl font-bold text-center mb-6 text-gray-800">Advising Plan Generator</h1>
        <p class="text-center text-gray-600 mb-8">Click a button to generate a schedule based on your criteria.</p>

        <div class="flex flex-col sm:flex-row justify-center items-center space-y-4 sm:space-y-0 sm:space-x-4 mb-8">
            <button id="findPreferred" class="w-full sm:w-auto px-6 py-3 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 transition duration-300 ease-in-out">
                Find My Preferred Schedules
            </button>
            <button id="findFourDay" class="w-full sm:w-auto px-6 py-3 bg-green-600 text-white font-semibold rounded-lg shadow-md hover:bg-green-700 transition duration-300 ease-in-out">
                Find 4-Day Schedules (Any Faculty)
            </button>
            <button id="findFiveDay" class="w-full sm:w-auto px-6 py-3 bg-indigo-600 text-white font-semibold rounded-lg shadow-md hover:bg-indigo-700 transition duration-300 ease-in-out">
                Find 5-Day Schedules (Any Faculty)
            </button>
        </div>

        <div id="results" class="space-y-12">
            <!-- Schedules will be dynamically inserted here -->
        </div>

        <div id="loading" class="hidden text-center mt-8">
            <div class="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent align-[-0.125em] text-blue-500 motion-reduce:animate-[spin_1.5s_linear_infinite]" role="status">
                <span class="!absolute !-m-px !h-px !w-px !overflow-hidden !whitespace-nowrap !border-0 !p-0 ![clip:rect(0,0,0,0)]">Loading...</span>
            </div>
            <p class="mt-2 text-gray-500">Generating schedules...</p>
        </div>
    </div>

    <script>
        // Define all course data based on the user's provided table
        const allCourses = [
            { course: "ENG111", section: 1, faculty: "KSS", time: "04:20 PM - 05:50 PM", days: "ST", seats: 35 },
            { course: "ENG111", section: 2, faculty: "LMh", time: "04:20 PM - 05:50 PM", days: "ST", seats: 40 },
            { course: "ENG111", section: 3, faculty: "FTN", time: "08:00 AM - 09:30 AM", days: "MW", seats: 35 },
            { course: "ENG111", section: 4, faculty: "NSj", time: "08:00 AM - 09:30 AM", days: "MW", seats: 40 },
            { course: "ENG111", section: 5, faculty: "MNK", time: "09:40 AM - 11:10 AM", days: "MW", seats: 35 },
            { course: "ENG111", section: 6, faculty: "NSj", time: "09:40 AM - 11:10 AM", days: "MW", seats: 40 },
            { course: "ENG111", section: 7, faculty: "MNK", time: "11:20 AM - 12:50 PM", days: "MW", seats: 35 },
            { course: "ENG111", section: 8, faculty: "NCA", time: "02:40 PM - 04:10 PM", days: "MW", seats: 35 },
            { course: "ENG111", section: 9, faculty: "NCA", time: "04:20 PM - 05:50 PM", days: "MW", seats: 35 },
            { course: "ENG111", section: 10, faculty: "KSS", time: "04:20 PM - 05:50 PM", days: "MW", seats: 35 },
            { course: "ENG111", section: 11, faculty: "TAA", time: "11:20 AM - 12:50 PM", days: "RA", seats: 40 },
            { course: "ENG111", section: 12, faculty: "TAA", time: "01:00 PM - 02:30 PM", days: "RA", seats: 40 },
            { course: "ENG111", section: 13, faculty: "SZn", time: "02:40 PM - 04:10 PM", days: "RA", seats: 40 },
            { course: "ENG111", section: 14, faculty: "SZn", time: "04:20 PM - 05:50 PM", days: "RA", seats: 40 },
            { course: "ENG111", section: 15, faculty: "FzM", time: "04:20 PM - 05:50 PM", days: "MW", seats: 40 },
            { course: "ENG111", section: 16, faculty: "FJN", time: "04:20 PM - 05:50 PM", days: "ST", seats: 35 },
            { course: "CSE373", section: 1, faculty: "SfM1", time: "11:20 AM - 12:50 PM", days: "ST", seats: 30 },
            { course: "CSE373", section: 2, faculty: "ARa2", time: "09:40 AM - 11:10 AM", days: "MW", seats: 35 },
            { course: "CSE373", section: 3, faculty: "STI", time: "01:00 PM - 02:30 PM", days: "MW", seats: 35 },
            { course: "CSE373", section: 4, faculty: "STI", time: "01:00 PM - 02:30 PM", days: "ST", seats: 35 },
            { course: "CSE373", section: 5, faculty: "IqN", time: "08:00 AM - 09:30 AM", days: "MW", seats: 35 },
            { course: "CSE373", section: 6, faculty: "IqN", time: "01:00 PM - 02:30 PM", days: "MW", seats: 35 },
            { course: "CSE373", section: 7, faculty: "QISD", time: "04:20 PM - 05:50 PM", days: "ST", seats: 35 },
            { course: "CSE373", section: 8, faculty: "SMAH", time: "08:00 AM - 09:30 AM", days: "RA", seats: 35 },
            { course: "CSE373", section: 9, faculty: "SMAH", time: "09:40 AM - 11:10 AM", days: "RA", seats: 35 },
            { course: "CSE373", section: 10, faculty: "EKD", time: "08:00 AM - 09:30 AM", days: "ST", seats: 35 },
            { course: "CSE373", section: 11, faculty: "EKD", time: "09:40 AM - 11:10 AM", days: "ST", seats: 35 },
            { course: "CSE373", section: 12, faculty: "ARa2", time: "02:40 PM - 04:10 PM", days: "MW", seats: 35 },
            { course: "CSE373", section: 13, faculty: "STL", time: "09:40 AM - 11:10 AM", days: "MW", seats: 35 },
            { course: "EEE111", section: 1, faculty: "Aqu", time: "09:40 AM - 11:10 AM", days: "MW", seats: 35 },
            { course: "EEE111", section: 2, faculty: "RTK", time: "11:20 AM - 12:50 PM", days: "ST", seats: 35 },
            { course: "EEE111", section: 3, faculty: "MKL", time: "01:00 PM - 02:30 PM", days: "ST", seats: 35 },
            { course: "EEE111", section: 4, faculty: "JSA", time: "11:20 AM - 12:50 PM", days: "MW", seats: 35 },
            { course: "EEE111", section: 5, faculty: "JSA", time: "02:40 PM - 04:10 PM", days: "MW", seats: 35 },
            { course: "EEE111", section: 6, faculty: "SSH1", time: "01:00 PM - 02:30 PM", days: "ST", seats: 35 },
            { course: "EEE111", section: 7, faculty: "SSH1", time: "02:40 PM - 04:10 PM", days: "ST", seats: 35 },
            { course: "EEE111", section: 9, faculty: "SvS", time: "11:20 AM - 12:50 PM", days: "RA", seats: 35 },
            { course: "EEE111", section: 10, faculty: "MFY", time: "04:20 PM - 05:50 PM", days: "ST", seats: 35 },
            { course: "EEE111", section: 11, faculty: "KSE", time: "08:00 AM - 09:30 AM", days: "ST", seats: 35 },
            { course: "EEE111", section: 12, faculty: "SMU1", time: "08:00 AM - 09:30 AM", days: "RA", seats: 35 },
            { course: "EEE111", section: 13, faculty: "AKAZ", time: "11:20 AM - 12:50 PM", days: "RA", seats: 35 },
            { course: "EEE111", section: 14, faculty: "AKAZ", time: "01:00 PM - 02:30 PM", days: "RA", seats: 35 },
            { course: "EEE111", section: 15, faculty: "SMU1", time: "09:40 AM - 11:10 AM", days: "RA", seats: 35 },
            { course: "EEE111", section: 16, faculty: "HAI", time: "08:00 AM - 09:30 AM", days: "RA", seats: 35 },
            { course: "EEE111", section: 17, faculty: "NaNR", time: "11:20 AM - 12:50 PM", days: "MW", seats: 35 },
            { course: "EEE111L", section: 1, faculty: "Aqu", time: "02:40 PM - 05:50 PM", days: "T", seats: 35 },
            { course: "EEE111L", section: 2, faculty: "RTK", time: "02:40 PM - 05:50 PM", days: "S", seats: 35 },
            { course: "EEE111L", section: 3, faculty: "MKL", time: "08:00 AM - 11:10 AM", days: "R", seats: 35 },
            { course: "EEE111L", section: 4, faculty: "JSA", time: "08:00 AM - 11:10 AM", days: "M", seats: 35 },
            { course: "EEE111L", section: 5, faculty: "JSA", time: "08:00 AM - 11:10 AM", days: "W", seats: 35 },
            { course: "EEE111L", section: 6, faculty: "SSH1", time: "08:00 AM - 11:10 AM", days: "S", seats: 35 },
            { course: "EEE111L", section: 7, faculty: "SSH1", time: "08:00 AM - 11:10 AM", days: "T", seats: 35 },
            { course: "EEE111L", section: 9, faculty: "SvS", time: "11:20 AM - 02:30 PM", days: "W", seats: 35 },
            { course: "EEE111L", section: 10, faculty: "MFY", time: "11:20 AM - 02:30 PM", days: "S", seats: 35 },
            { course: "EEE111L", section: 11, faculty: "KSE", time: "11:20 AM - 02:30 PM", days: "T", seats: 35 },
            { course: "EEE111L", section: 12, faculty: "SMU1", time: "11:20 AM - 02:30 PM", days: "A", seats: 35 },
            { course: "EEE111L", section: 13, faculty: "AKAZ", time: "08:00 AM - 11:10 AM", days: "R", seats: 35 },
            { course: "EEE111L", section: 14, faculty: "AKAZ", time: "08:00 AM - 11:10 AM", days: "A", seats: 35 },
            { course: "EEE111L", section: 15, faculty: "SMU1", time: "02:40 PM - 05:50 PM", days: "A", seats: 30 },
            { course: "EEE111L", section: 16, faculty: "HAI", time: "11:20 AM - 02:30 PM", days: "A", seats: 30 },
            { course: "EEE111L", section: 17, faculty: "NaNR", time: "02:40 PM - 05:50 PM", days: "M", seats: 30 },
            { course: "CSE273", section: 1, faculty: "ARa2", time: "09:40 AM - 11:10 AM", days: "ST", seats: 35 },
            { course: "CSE273", section: 2, faculty: "ARa2", time: "11:20 AM - 12:50 PM", days: "ST", seats: 35 },
            { course: "CSE273", section: 3, faculty: "MKN1", time: "09:40 AM - 11:10 AM", days: "RA", seats: 35 },
            { course: "CSE273", section: 4, faculty: "MMK1", time: "08:00 AM - 09:30 AM", days: "ST", seats: 35 },
            { course: "CSE273", section: 5, faculty: "MMK1", time: "09:40 AM - 11:10 AM", days: "ST", seats: 35 },
            { course: "CSE273", section: 6, faculty: "TBA", time: "11:20 AM - 12:50 PM", days: "RA", seats: 0 },
            { course: "CSE323", section: 1, faculty: "NvA", time: "09:40 AM - 11:10 AM", days: "MW", seats: 35 },
            { course: "CSE323", section: 2, faculty: "NvA", time: "11:20 AM - 12:50 PM", days: "MW", seats: 35 },
            { course: "CSE323", section: 3, faculty: "RMz1", time: "08:00 AM - 09:30 AM", days: "RA", seats: 35 },
            { course: "CSE323", section: 4, faculty: "RMz1", time: "11:20 AM - 12:50 PM", days: "RA", seats: 35 },
            { course: "CSE323", section: 5, faculty: "MUA3", time: "08:00 AM - 09:30 AM", days: "RA", seats: 35 },
            { course: "CSE323", section: 6, faculty: "MUA3", time: "09:40 AM - 11:10 AM", days: "RA", seats: 35 },
            { course: "CSE323", section: 7, faculty: "TBA", time: "01:00 PM - 02:30 PM", days: "RA", seats: 35 },
            { course: "CSE323", section: 8, faculty: "TBA", time: "02:40 PM - 04:10 PM", days: "RA", seats: 35 },
            { course: "CSE323", section: 9, faculty: "TBA", time: "08:00 AM - 09:30 AM", days: "ST", seats: 35 },
            { course: "CSE323", section: 10, faculty: "TBA", time: "01:00 PM - 02:30 PM", days: "ST", seats: 35 }
        ];

        // User's hardcoded preferences
        const userPreferences = {
            'ENG111': ['NCA', 'FTN'],
            'CSE373': ['SfM1', 'SMAH', 'STI', 'EKD'],
            'EEE111': ['RTK', 'SvS', 'MFY'],
            'CSE273': ['MKN1', 'MMK1'],
            'CSE323': ['MUA3', 'RMz1']
        };

        const resultsDiv = document.getElementById('results');
        const loadingDiv = document.getElementById('loading');
        const requiredCourses = ['ENG111', 'CSE373', 'EEE111', 'CSE273', 'CSE323'];

        // Helper function to parse time string to minutes for comparison
        function parseTime(timeStr) {
            const [startStr, endStr] = timeStr.split(' - ');
            const [startTime, startAMPM] = startStr.split(' ');
            const [startHours, startMinutes] = startTime.split(':').map(Number);
            
            const [endTime, endAMPM] = endStr.split(' ');
            const [endHours, endMinutes] = endTime.split(':').map(Number);

            const startTotalMinutes = (startAMPM === 'PM' && startHours !== 12 ? startHours + 12 : startHours) * 60 + startMinutes;
            const endTotalMinutes = (endAMPM === 'PM' && endHours !== 12 ? endHours + 12 : endHours) * 60 + endMinutes;

            return { start: startTotalMinutes, end: endTotalMinutes };
        }

        // Helper function to check for time conflicts between two courses
        function checkConflict(schedule, newCourse) {
            const newDays = newCourse.days.split('').sort();
            const newTime = parseTime(newCourse.time);

            for (const existingCourse of schedule) {
                const existingDays = existingCourse.days.split('').sort();
                const existingTime = parseTime(existingCourse.time);
                
                // Check for overlapping days
                const overlappingDays = newDays.filter(day => existingDays.includes(day));
                if (overlappingDays.length > 0) {
                    // Check for overlapping times
                    if (Math.max(newTime.start, existingTime.start) < Math.min(newTime.end, existingTime.end)) {
                        return true; // Conflict found
                    }
                }
            }
            return false; // No conflict
        }

        // Backtracking function to find all possible schedules
        function findSchedules(coursesToSchedule, currentSchedule, results, usePreferences) {
            if (coursesToSchedule.length === 0) {
                // Check the total number of days for the final schedule
                const allDays = currentSchedule.reduce((acc, course) => acc.concat(course.days.split('')), []);
                const uniqueDays = new Set(allDays).size;

                if (usePreferences || (usePreferences === false && [4, 5].includes(uniqueDays))) {
                    results.push(currentSchedule);
                }
                return;
            }

            const currentCourseName = coursesToSchedule[0];
            const remainingCourses = coursesToSchedule.slice(1);
            
            // Filter available sections based on the current course
            let sections = allCourses.filter(c => c.course === currentCourseName);
            
            // Apply preferences if needed. Filter to only include preferred faculty
            if (usePreferences) {
                sections = sections.filter(sec => userPreferences[sec.course].includes(sec.faculty));
            }

            for (const section of sections) {
                let tempSchedule = [...currentSchedule];
                let potentialCourses = [section];
                
                // Special handling for EEE111L
                if (currentCourseName === 'EEE111') {
                    const labSection = allCourses.find(c => c.course === 'EEE111L' && c.section === section.section);
                    if (labSection) {
                        potentialCourses.push(labSection);
                    } else {
                        // Skip if the lab section isn't found for the theory section
                        continue;
                    }
                }

                // Check for conflicts with the entire potentialCourses group
                let hasConflict = false;
                for (const potentialCourse of potentialCourses) {
                    if (checkConflict(currentSchedule, potentialCourse)) {
                        hasConflict = true;
                        break;
                    }
                }

                if (!hasConflict) {
                    tempSchedule = tempSchedule.concat(potentialCourses);
                    findSchedules(remainingCourses, tempSchedule, results, usePreferences);
                }
            }
        }

        // Function to render the found schedules
        function renderSchedules(schedules) {
            resultsDiv.innerHTML = '';
            if (schedules.length === 0) {
                resultsDiv.innerHTML = '<p class="text-center text-gray-500 text-lg">No schedules found that match the criteria.</p>';
                return;
            }

            schedules.forEach((schedule, index) => {
                const totalDays = new Set(schedule.flatMap(s => s.days.split(''))).size;
                let tableHtml = `
                    <div class="bg-gray-100 p-6 rounded-lg shadow-md border border-gray-200">
                        <h2 class="text-xl font-semibold mb-4">Advising Plan #${index + 1} (${totalDays} days/week)</h2>
                        <table class="min-w-full bg-white rounded-lg overflow-hidden">
                            <thead class="bg-gray-200">
                                <tr>
                                    <th class="px-4 py-2 text-left text-sm font-medium text-gray-700">Course</th>
                                    <th class="px-4 py-2 text-left text-sm font-medium text-gray-700">Section</th>
                                    <th class="px-4 py-2 text-left text-sm font-medium text-gray-700">Faculty</th>
                                    <th class="px-4 py-2 text-left text-sm font-medium text-gray-700">Time</th>
                                    <th class="px-4 py-2 text-left text-sm font-medium text-gray-700">Days</th>
                                </tr>
                            </thead>
                            <tbody class="divide-y divide-gray-200">
                `;
                
                schedule.sort((a, b) => a.course.localeCompare(b.course));
                schedule.forEach(course => {
                    tableHtml += `
                        <tr>
                            <td class="px-4 py-2 text-sm">${course.course}</td>
                            <td class="px-4 py-2 text-sm">${course.section}</td>
                            <td class="px-4 py-2 text-sm">${course.faculty}</td>
                            <td class="px-4 py-2 text-sm">${course.time}</td>
                            <td class="px-4 py-2 text-sm">${course.days}</td>
                        </tr>
                    `;
                });

                tableHtml += `
                            </tbody>
                        </table>
                    </div>
                `;
                resultsDiv.innerHTML += tableHtml;
            });
        }

        // Event listeners for the buttons
        document.getElementById('findPreferred').addEventListener('click', () => {
            loadingDiv.classList.remove('hidden');
            resultsDiv.innerHTML = '';
            setTimeout(() => {
                const schedules = [];
                findSchedules(requiredCourses, [], schedules, true);
                renderSchedules(schedules);
                loadingDiv.classList.add('hidden');
            }, 10);
        });

        document.getElementById('findFourDay').addEventListener('click', () => {
            loadingDiv.classList.remove('hidden');
            resultsDiv.innerHTML = '';
            setTimeout(() => {
                const schedules = [];
                findSchedules(requiredCourses, [], schedules, false);
                const fourDaySchedules = schedules.filter(s => new Set(s.flatMap(c => c.days.split(''))).size === 4);
                renderSchedules(fourDaySchedules);
                loadingDiv.classList.add('hidden');
            }, 10);
        });

        document.getElementById('findFiveDay').addEventListener('click', () => {
            loadingDiv.classList.remove('hidden');
            resultsDiv.innerHTML = '';
            setTimeout(() => {
                const schedules = [];
                findSchedules(requiredCourses, [], schedules, false);
                const fiveDaySchedules = schedules.filter(s => new Set(s.flatMap(c => c.days.split(''))).size === 5);
                renderSchedules(fiveDaySchedules);
                loadingDiv.classList.add('hidden');
            }, 10);
        });
    </script>
</body>
</html>

import React, { useState, useMemo } from 'react';

const CourseScheduler = () => {
  // Filter states
  const [filters, setFilters] = useState({
    // Day filters
    maxDays: 5,
    minDays: 1,
    excludeDays: [],
    
    // Time filters
    noEarlyMorning: false, // before 9 AM
    noLateEvening: false,  // after 5 PM
    preferAfternoon: false,
    
    // Faculty preferences
    usePreferences: false,
    strictPreferences: false,
    
    // Scheduling algorithms
    algorithm: 'all', // all, compact, balanced, preferred
    
    // Display options
    sortBy: 'days', // days, time, faculty
    maxResults: 20,
    
    // Advanced filters
    minGapBetween: 0, // minutes
    maxGapBetween: 480, // 8 hours
    sameBuilding: false,
    
    // Day-specific filters
    specificDays: {
      saturday: true,
      sunday: true,
      monday: true,
      tuesday: true,
      wednesday: true,
      thursday: true,
      friday: true
    }
  });

  const [showFilters, setShowFilters] = useState(false);
  const [selectedSchedule, setSelectedSchedule] = useState(null);

  // Course data (same as before)
  const courses = [
    { course: "ENG111", section: "1", faculty: "KSS", time: "04:20 PM - 05:50 PM", days: "ST", seats: 35 },
    { course: "ENG111", section: "2", faculty: "LMh", time: "04:20 PM - 05:50 PM", days: "ST", seats: 40 },
    { course: "ENG111", section: "3", faculty: "FTN", time: "08:00 AM - 09:30 AM", days: "MW", seats: 35 },
    { course: "ENG111", section: "4", faculty: "NSj", time: "08:00 AM - 09:30 AM", days: "MW", seats: 40 },
    { course: "ENG111", section: "5", faculty: "MNK", time: "09:40 AM - 11:10 AM", days: "MW", seats: 35 },
    { course: "ENG111", section: "6", faculty: "NSj", time: "09:40 AM - 11:10 AM", days: "MW", seats: 40 },
    { course: "ENG111", section: "7", faculty: "MNK", time: "11:20 AM - 12:50 PM", days: "MW", seats: 35 },
    { course: "ENG111", section: "8", faculty: "NCA", time: "02:40 PM - 04:10 PM", days: "MW", seats: 35 },
    { course: "ENG111", section: "9", faculty: "NCA", time: "04:20 PM - 05:50 PM", days: "MW", seats: 35 },
    { course: "ENG111", section: "10", faculty: "KSS", time: "04:20 PM - 05:50 PM", days: "MW", seats: 35 },
    { course: "ENG111", section: "11", faculty: "TAA", time: "11:20 AM - 12:50 PM", days: "RA", seats: 40 },
    { course: "ENG111", section: "12", faculty: "TAA", time: "01:00 PM - 02:30 PM", days: "RA", seats: 40 },
    { course: "ENG111", section: "13", faculty: "SZn", time: "02:40 PM - 04:10 PM", days: "RA", seats: 40 },
    { course: "ENG111", section: "14", faculty: "SZn", time: "04:20 PM - 05:50 PM", days: "RA", seats: 40 },
    { course: "ENG111", section: "15", faculty: "FzM", time: "04:20 PM - 05:50 PM", days: "MW", seats: 40 },
    { course: "ENG111", section: "16", faculty: "FJN", time: "04:20 PM - 05:50 PM", days: "ST", seats: 35 },

    { course: "CSE373", section: "1", faculty: "SfM1", time: "11:20 AM - 12:50 PM", days: "ST", seats: 30 },
    { course: "CSE373", section: "2", faculty: "ARa2", time: "09:40 AM - 11:10 AM", days: "MW", seats: 35 },
    { course: "CSE373", section: "3", faculty: "STI", time: "01:00 PM - 02:30 PM", days: "MW", seats: 35 },
    { course: "CSE373", section: "4", faculty: "STI", time: "01:00 PM - 02:30 PM", days: "ST", seats: 35 },
    { course: "CSE373", section: "5", faculty: "IqN", time: "08:00 AM - 09:30 AM", days: "MW", seats: 35 },
    { course: "CSE373", section: "6", faculty: "IqN", time: "01:00 PM - 02:30 PM", days: "MW", seats: 35 },
    { course: "CSE373", section: "7", faculty: "QISD", time: "04:20 PM - 05:50 PM", days: "ST", seats: 35 },
    { course: "CSE373", section: "8", faculty: "SMAH", time: "08:00 AM - 09:30 AM", days: "RA", seats: 35 },
    { course: "CSE373", section: "9", faculty: "SMAH", time: "09:40 AM - 11:10 AM", days: "RA", seats: 35 },
    { course: "CSE373", section: "10", faculty: "EKD", time: "08:00 AM - 09:30 AM", days: "ST", seats: 35 },
    { course: "CSE373", section: "11", faculty: "EKD", time: "09:40 AM - 11:10 AM", days: "ST", seats: 35 },
    { course: "CSE373", section: "12", faculty: "ARa2", time: "02:40 PM - 04:10 PM", days: "MW", seats: 35 },
    { course: "CSE373", section: "13", faculty: "STL", time: "09:40 AM - 11:10 AM", days: "MW", seats: 35 },

    { course: "EEE111", section: "1", faculty: "Aqu", time: "09:40 AM - 11:10 AM", days: "MW", seats: 35 },
    { course: "EEE111", section: "2", faculty: "RTK", time: "11:20 AM - 12:50 PM", days: "ST", seats: 35 },
    { course: "EEE111", section: "3", faculty: "MKL", time: "01:00 PM - 02:30 PM", days: "ST", seats: 35 },
    { course: "EEE111", section: "4", faculty: "JSA", time: "11:20 AM - 12:50 PM", days: "MW", seats: 35 },
    { course: "EEE111", section: "5", faculty: "JSA", time: "02:40 PM - 04:10 PM", days: "MW", seats: 35 },
    { course: "EEE111", section: "6", faculty: "SSH1", time: "01:00 PM - 02:30 PM", days: "ST", seats: 35 },
    { course: "EEE111", section: "7", faculty: "SSH1", time: "02:40 PM - 04:10 PM", days: "ST", seats: 35 },
    { course: "EEE111", section: "9", faculty: "SvS", time: "11:20 AM - 12:50 PM", days: "RA", seats: 35 },
    { course: "EEE111", section: "10", faculty: "MFY", time: "04:20 PM - 05:50 PM", days: "ST", seats: 35 },
    { course: "EEE111", section: "11", faculty: "KSE", time: "08:00 AM - 09:30 AM", days: "ST", seats: 35 },
    { course: "EEE111", section: "12", faculty: "SMU1", time: "08:00 AM - 09:30 AM", days: "RA", seats: 35 },
    { course: "EEE111", section: "13", faculty: "AKAZ", time: "11:20 AM - 12:50 PM", days: "RA", seats: 35 },
    { course: "EEE111", section: "14", faculty: "AKAZ", time: "01:00 PM - 02:30 PM", days: "RA", seats: 35 },
    { course: "EEE111", section: "15", faculty: "SMU1", time: "09:40 AM - 11:10 AM", days: "RA", seats: 35 },
    { course: "EEE111", section: "16", faculty: "HAI", time: "08:00 AM - 09:30 AM", days: "RA", seats: 35 },
    { course: "EEE111", section: "17", faculty: "NaNR", time: "11:20 AM - 12:50 PM", days: "MW", seats: 35 },

    { course: "EEE111L", section: "1", faculty: "Aqu", time: "02:40 PM - 05:50 PM", days: "T", seats: 35 },
    { course: "EEE111L", section: "2", faculty: "RTK", time: "02:40 PM - 05:50 PM", days: "S", seats: 35 },
    { course: "EEE111L", section: "3", faculty: "MKL", time: "08:00 AM - 11:10 AM", days: "R", seats: 35 },
    { course: "EEE111L", section: "4", faculty: "JSA", time: "08:00 AM - 11:10 AM", days: "M", seats: 35 },
    { course: "EEE111L", section: "5", faculty: "JSA", time: "08:00 AM - 11:10 AM", days: "W", seats: 35 },
    { course: "EEE111L", section: "6", faculty: "SSH1", time: "08:00 AM - 11:10 AM", days: "S", seats: 35 },
    { course: "EEE111L", section: "7", faculty: "SSH1", time: "08:00 AM - 11:10 AM", days: "T", seats: 35 },
    { course: "EEE111L", section: "9", faculty: "SvS", time: "11:20 AM - 02:30 PM", days: "W", seats: 35 },
    { course: "EEE111L", section: "10", faculty: "MFY", time: "11:20 AM - 02:30 PM", days: "S", seats: 35 },
    { course: "EEE111L", section: "11", faculty: "KSE", time: "11:20 AM - 02:30 PM", days: "T", seats: 35 },
    { course: "EEE111L", section: "12", faculty: "SMU1", time: "11:20 AM - 02:30 PM", days: "A", seats: 35 },
    { course: "EEE111L", section: "13", faculty: "AKAZ", time: "08:00 AM - 11:10 AM", days: "R", seats: 35 },
    { course: "EEE111L", section: "14", faculty: "AKAZ", time: "08:00 AM - 11:10 AM", days: "A", seats: 35 },
    { course: "EEE111L", section: "15", faculty: "SMU1", time: "02:40 PM - 05:50 PM", days: "A", seats: 30 },
    { course: "EEE111L", section: "16", faculty: "HAI", time: "11:20 AM - 02:30 PM", days: "A", seats: 30 },
    { course: "EEE111L", section: "17", faculty: "NaNR", time: "02:40 PM - 05:50 PM", days: "M", seats: 30 },

    { course: "CSE273", section: "1", faculty: "ARa2", time: "09:40 AM - 11:10 AM", days: "ST", seats: 35 },
    { course: "CSE273", section: "2", faculty: "ARa2", time: "11:20 AM - 12:50 PM", days: "ST", seats: 35 },
    { course: "CSE273", section: "3", faculty: "MKN1", time: "09:40 AM - 11:10 AM", days: "RA", seats: 35 },
    { course: "CSE273", section: "4", faculty: "MMK1", time: "08:00 AM - 09:30 AM", days: "ST", seats: 35 },
    { course: "CSE273", section: "5", faculty: "MMK1", time: "09:40 AM - 11:10 AM", days: "ST", seats: 35 },

    { course: "CSE323", section: "1", faculty: "NvA", time: "09:40 AM - 11:10 AM", days: "MW", seats: 35 },
    { course: "CSE323", section: "2", faculty: "NvA", time: "11:20 AM - 12:50 PM", days: "MW", seats: 35 },
    { course: "CSE323", section: "3", faculty: "RMz1", time: "08:00 AM - 09:30 AM", days: "RA", seats: 35 },
    { course: "CSE323", section: "4", faculty: "RMz1", time: "11:20 AM - 12:50 PM", days: "RA", seats: 35 },
    { course: "CSE323", section: "5", faculty: "MUA3", time: "08:00 AM - 09:30 AM", days: "RA", seats: 35 },
    { course: "CSE323", section: "6", faculty: "MUA3", time: "09:40 AM - 11:10 AM", days: "RA", seats: 35 },
  ];

  // Preferences
  const preferences = {
    "ENG111": ["NCA", "FTN"],
    "CSE373": ["SfM1", "SMAH", "STI", "EKD"],
    "EEE111": ["RTK", "SvS", "MFY"],
    "CSE273": ["MKN1", "MMK1"],
    "CSE323": ["MUA3", "RMz1"]
  };

  // Day mapping
  const dayMap = { S: 'sunday', T: 'tuesday', M: 'monday', W: 'wednesday', R: 'thursday', A: 'saturday', F: 'friday' };

  // Helper functions
  const timeToMinutes = (timeStr) => {
    const [time, period] = timeStr.split(' ');
    const [hour, minute] = time.split(':').map(Number);
    return (period === 'PM' && hour !== 12 ? hour + 12 : hour === 12 && period === 'AM' ? 0 : hour) * 60 + minute;
  };

  const hasTimeConflict = (schedule) => {
    for (let i = 0; i < schedule.length; i++) {
      for (let j = i + 1; j < schedule.length; j++) {
        const course1 = schedule[i];
        const course2 = schedule[j];
        
        const days1 = course1.days.split('');
        const days2 = course2.days.split('');
        const sharedDays = days1.filter(day => days2.includes(day));
        
        if (sharedDays.length > 0) {
          const [start1, end1] = course1.time.split(' - ').map(timeToMinutes);
          const [start2, end2] = course2.time.split(' - ').map(timeToMinutes);
          
          if ((start1 < end2 && start2 < end1)) {
            return true;
          }
        }
      }
    }
    return false;
  };

  const countUniqueDays = (schedule) => {
    const allDays = new Set();
    schedule.forEach(course => {
      course.days.split('').forEach(day => allDays.add(day));
    });
    return allDays.size;
  };

  const passesFilters = (schedule, uniqueDays) => {
    // Day count filter
    if (uniqueDays < filters.minDays || uniqueDays > filters.maxDays) return false;

    // Specific days filter
    const scheduleDays = new Set();
    schedule.forEach(course => {
      course.days.split('').forEach(day => scheduleDays.add(day));
    });

    for (const day of scheduleDays) {
      if (!filters.specificDays[dayMap[day]]) return false;
    }

    // Exclude days filter
    for (const excludeDay of filters.excludeDays) {
      if (scheduleDays.has(excludeDay)) return false;
    }

    // Time filters
    for (const course of schedule) {
      const [startTime] = course.time.split(' - ');
      const startMinutes = timeToMinutes(startTime);
      
      if (filters.noEarlyMorning && startMinutes < 9 * 60) return false;
      if (filters.noLateEvening && startMinutes >= 17 * 60) return false;
      if (filters.preferAfternoon && startMinutes < 12 * 60) return false;
    }

    // Gap filters
    const sortedCourses = [...schedule].sort((a, b) => {
      const timeA = timeToMinutes(a.time.split(' - ')[0]);
      const timeB = timeToMinutes(b.time.split(' - ')[0]);
      return timeA - timeB;
    });

    for (let i = 0; i < sortedCourses.length - 1; i++) {
      const endTime1 = timeToMinutes(sortedCourses[i].time.split(' - ')[1]);
      const startTime2 = timeToMinutes(sortedCourses[i + 1].time.split(' - ')[0]);
      const gap = startTime2 - endTime1;
      
      if (gap < filters.minGapBetween || gap > filters.maxGapBetween) {
        // Only check if they're on the same day
        const days1 = sortedCourses[i].days.split('');
        const days2 = sortedCourses[i + 1].days.split('');
        if (days1.some(day => days2.includes(day))) {
          return false;
        }
      }
    }

    // Faculty preferences
    if (filters.usePreferences) {
      const preferredCount = schedule.filter(course => {
        if (course.course === "EEE111L") return true; // Lab courses follow theory
        return preferences[course.course]?.includes(course.faculty);
      }).length;
      
      if (filters.strictPreferences && preferredCount < 5) return false;
      if (!filters.strictPreferences && preferredCount === 0) return false;
    }

    return true;
  };

  const applyAlgorithm = (schedules) => {
    switch (filters.algorithm) {
      case 'compact':
        return schedules.filter(s => s.uniqueDays <= 3);
      case 'balanced':
        return schedules.filter(s => s.uniqueDays >= 4 && s.uniqueDays <= 5);
      case 'preferred':
        return schedules.filter(s => s.isPreferred);
      default:
        return schedules;
    }
  };

  const sortSchedules = (schedules) => {
    return schedules.sort((a, b) => {
      switch (filters.sortBy) {
        case 'days':
          return a.uniqueDays - b.uniqueDays;
        case 'time':
          const avgTimeA = a.schedule.reduce((sum, course) => 
            sum + timeToMinutes(course.time.split(' - ')[0]), 0) / a.schedule.length;
          const avgTimeB = b.schedule.reduce((sum, course) => 
            sum + timeToMinutes(course.time.split(' - ')[0]), 0) / b.schedule.length;
          return avgTimeA - avgTimeB;
        case 'faculty':
          return a.isPreferred === b.isPreferred ? 0 : a.isPreferred ? -1 : 1;
        default:
          return 0;
      }
    });
  };

  // Generate schedules
  const generateSchedules = useMemo(() => {
    const eng111Options = courses.filter(c => c.course === "ENG111");
    const cse373Options = courses.filter(c => c.course === "CSE373");
    const eee111Options = courses.filter(c => c.course === "EEE111");
    const eee111lOptions = courses.filter(c => c.course === "EEE111L");
    const cse273Options = courses.filter(c => c.course === "CSE273");
    const cse323Options = courses.filter(c => c.course === "CSE323");

    const schedules = [];

    for (const eng of eng111Options) {
      for (const cse373 of cse373Options) {
        for (const eee111 of eee111Options) {
          const eee111l = eee111lOptions.find(l => l.section === eee111.section);
          if (!eee111l) continue;
          
          for (const cse273 of cse273Options) {
            for (const cse323 of cse323Options) {
              const schedule = [eng, cse373, eee111, eee111l, cse273, cse323];
              
              if (!hasTimeConflict(schedule)) {
                const uniqueDays = countUniqueDays(schedule);
                const isPreferred = (
                  preferences["ENG111"].includes(eng.faculty) &&
                  preferences["CSE373"].includes(cse373.faculty) &&
                  preferences["EEE111"].includes(eee111.faculty) &&
                  preferences["CSE273"].includes(cse273.faculty) &&
                  preferences["CSE323"].includes(cse323.faculty)
                );
                
                const scheduleData = { schedule, uniqueDays, isPreferred };
                
                if (passesFilters(schedule, uniqueDays)) {
                  schedules.push(scheduleData);
                }
              }
            }
          }
        }
      }
    }

    const algorithmFiltered = applyAlgorithm(schedules);
    const sorted = sortSchedules(algorithmFiltered);
    
    return sorted.slice(0, filters.maxResults);
  }, [filters]);

  const FilterPanel = () => (
    <div className="bg-gray-50 p-4 rounded-lg mb-6">
      <h3 className="text-lg font-bold mb-4">Advanced Filters & Algorithms</h3>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {/* Day Filters */}
        <div className="space-y-2">
          <h4 className="font-semibold">Day Constraints</h4>
          <div className="flex gap-2">
            <input
              type="number" min="1" max="7" value={filters.minDays}
              onChange={e => setFilters(f => ({...f, minDays: parseInt(e.target.value)}))}
              className="w-16 px-2 py-1 border rounded"
            />
            <span>to</span>
            <input
              type="number" min="1" max="7" value={filters.maxDays}
              onChange={e => setFilters(f => ({...f, maxDays: parseInt(e.target.value)}))}
              className="w-16 px-2 py-1 border rounded"
            />
            <span>days</span>
          </div>
        </div>

        {/* Algorithm Selection */}
        <div className="space-y-2">
          <h4 className="font-semibold">Algorithm</h4>
          <select
            value={filters.algorithm}
            onChange={e => setFilters(f => ({...f, algorithm: e.target.value}))}
            className="w-full px-3 py-1 border rounded"
          >
            <option value="all">All Valid Schedules</option>
            <option value="compact">Compact (≤3 days)</option>
            <option value="balanced">Balanced (4-5 days)</option>
            <option value="preferred">Preferred Faculty Only</option>
          </select>
        </div>

        {/* Time Preferences */}
        <div className="space-y-2">
          <h4 className="font-semibold">Time Preferences</h4>
          <label className="flex items-center">
            <input
              type="checkbox" checked={filters.noEarlyMorning}
              onChange={e => setFilters(f => ({...f, noEarlyMorning: e.target.checked}))}
              className="mr-2"
            />
            No Early Morning (&lt;9 AM)
          </label>
          <label className="flex items-center">
            <input
              type="checkbox" checked={filters.noLateEvening}
              onChange={e => setFilters(f => ({...f, noLateEvening: e.target.checked}))}
              className="mr-2"
            />
            No Late Evening (≥5 PM)
          </label>
          <label className="flex items-center">
            <input
              type="checkbox" checked={filters.preferAfternoon}
              onChange={e => setFilters(f => ({...f, preferAfternoon: e.target.checked}))}
              className="mr-2"
            />
            Afternoon Only (≥12 PM)
          </label>
        </div>

        {/* Faculty Preferences */}
        <div className="space-y-2">
          <h4 className="font-semibold">Faculty Preferences</h4>
          <label className="flex items-center">
            <input
              type="checkbox" checked={filters.usePreferences}
              onChange={e => setFilters(f => ({...f, usePreferences: e.target.checked}))}
              className="mr-2"
            />
            Use My Preferences
          </label>
          <label className="flex items-center">
            <input
              type="checkbox" checked={filters.strictPreferences}
              onChange={e => setFilters(f => ({...f, strictPreferences: e.target.checked}))}
              className="mr-2"
              disabled={!filters.usePreferences}
            />
            Strict Mode (All Preferred)
          </label>
        </div>

        {/* Gap Control */}
        <div className="space-y-2">
          <h4 className="font-semibold">Class Gaps</h4>
          <div className="flex gap-2 text-sm">
            <input
              type="number" min="0" max="480" step="30" value={filters.minGapBetween}
              onChange={e => setFilters(f => ({...f, minGapBetween: parseInt(e.target.value)}))}
              className="w-16 px-2 py-1 border rounded"
            />
            <span>to</span>
            <input
              type="number" min="0" max="480" step="30" value={filters.maxGapBetween}
              onChange={e => setFilters(f => ({...f, maxGapBetween: parseInt(e.target.value)}))}
              className="w-16 px-2 py-1 border rounded"
            />
            <span>min gap</span>
          </div>
        </div>

        {/* Sort & Display */}
        <div className="space-y-2">
          <h4 className="font-semibold">Display Options</h4>
          <select
            value={filters.sortBy}
            onChange={e => setFilters(f => ({...f, sortBy: e.target.value}))}
            className="w-full px-3 py-1 border rounded"
          >
            <option value="days">Sort by Days</option>
            <option value="time">Sort by Time</option>
            <option value="faculty">Sort by Preference</option>
          </select>
          <input
            type="number" min="1" max="100" value={filters.maxResults}
            onChange={e => setFilters(f => ({...f, maxResults: parseInt(e.target.value)}))}
            className="w-full px-3 py-1 border rounded"
            placeholder="Max results"
          />
        </div>
      </div>

      {/* Day Selection */}
      <div className="mt-4">
        <h4 className="font-semibold mb-2">Available Days</h4>
        <div className="flex flex-wrap gap-2">
          {Object.entries(filters.specificDays).map(([day, enabled]) => (
            <label key={day} className="flex items-center">
              <input
                type="checkbox" checked={enabled}
                onChange={e => setFilters(f => ({
                  ...f, 
                  specificDays: {...f.specificDays, [day]: e.target.checked}
                }))}
                className="mr-1"
              />
              <span className="capitalize text-sm">{day}</span>
            </label>
          ))}
        </div>
      </div>
    </div>
  );

  const ScheduleTable = ({ schedules }) => (
    <div className="space-y-6">
      {schedules.map((item, idx) => (
        <div key={idx} className="border rounded-lg p-4 hover:shadow-lg transition-shadow">
          <div className="flex justify-between items-center mb-3">
            <h4 className="font-semibold">
              Plan {idx + 1} - {item.uniqueDays} days
              {item.isPreferred && <span className="ml-2 bg-green-100 text-green-800 px-2 py-1 rounded text-xs">Preferred</span>}
            </h4>
            <button
              onClick={() => setSelectedSchedule(selectedSchedule === idx ? null : idx)}
              className="bg-blue-500 text-white px-3 py-1 rounded text-sm hover:bg-blue-600"
            >
              {selectedSchedule === idx ? 'Hide Details' : 'View Details'}
            </button>
          </div>

          <div className="overflow-x-auto">
            <table className="min-w-full border-collapse border">
              <thead>
                <tr className="bg-gray-100">
                  <th className="border p-2 text-left">Course</th>
                  <th className="border p-2 text-left">Section</th>
                  <th className="border p-2 text-left">Faculty</th>
                  <th className="border p-2 text-left">Time</th>
                  <th className="border p-2 text-left">Days</th>
                  <th className="border p-2 text-left">Seats</th>
                </tr>
              </thead>
              <tbody>
                {item.schedule.map((course, courseIdx) => (
                  <tr key={courseIdx} className={
                    course.course === "EEE111L" ? "bg-blue-50" : 
                    preferences[course.course]?.includes(course.faculty) ? "bg-green-50" : ""
                  }>
                    <td className="border p-2 font-medium">{course.course}</td>
                    <td className="border p-2">{course.section}</td>
                    <td className="border p-2">{course.faculty}</td>
                    <td className="border p-2">{course.time}</td>
                    <td className="border p-2">{course.days}</td>
                    <td className="border p-2">{course.seats}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {selectedSchedule === idx && (
            <div className="mt-4 p-3 bg-gray-50 rounded">
              <h5 className="font-semibold mb-2">Schedule Analysis</h5>
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <strong>Days Used:</strong> {
                    [...new Set(
                      item.schedule.flatMap(course => course.days.split(''))
                    )].map(day => ({
                      'S': 'Sun', 'M': 'Mon', 'T': 'Tue', 'W': 'Wed', 
                      'R': 'Thu', 'A': 'Sat', 'F': 'Fri'
                    })[day]).join(', ')
                  }
                </div>
                <div>
                  <strong>Total Classes:</strong> {item.schedule.length}
                </div>
                <div>
                  <strong>Preferred Faculty:</strong> {
                    item.schedule.filter(course => 
                      course.course !== "EEE111L" && 
                      preferences[course.course]?.includes(course.faculty)
                    ).length
                  }/{item.schedule.filter(c => c.course !== "EEE111L").length}
                </div>
                <div>
                  <strong>Earliest Class:</strong> {
                    Math.min(...item.schedule.map(course => 
                      timeToMinutes(course.time.split(' - ')[0])
                    )) / 60 < 12 ? 
                    Math.min(...item.schedule.map(course => 
                      timeToMinutes(course.time.split(' - ')[0])
                    )) / 60 + ' AM' : 
                    (Math.min(...item.schedule.map(course => 
                      timeToMinutes(course.time.split(' - ')[0])
                    )) / 60 - 12) + ' PM'
                  }
                </div>
              </div>
            </div>
          )}
        </div>
      ))}
    </div>
  );

  const resetFilters = () => {
    setFilters({
      maxDays: 5, minDays: 1, excludeDays: [],
      noEarlyMorning: false, noLateEvening: false, preferAfternoon: false,
      usePreferences: false, strictPreferences: false,
      algorithm: 'all', sortBy: 'days', maxResults: 20,
      minGapBetween: 0, maxGapBetween: 480, sameBuilding: false,
      specificDays: {
        saturday: true, sunday: true, monday: true, tuesday: true,
        wednesday: true, thursday: true, friday: true
      }
    });
  };

  const quickFilters = [
    { 
      name: 'My Preferences', 
      action: () => setFilters(f => ({...f, usePreferences: true, algorithm: 'preferred'}))
    },
    { 
      name: '4-Day Week', 
      action: () => setFilters(f => ({...f, maxDays: 4, algorithm: 'compact'}))
    },
    { 
      name: 'No Early Classes', 
      action: () => setFilters(f => ({...f, noEarlyMorning: true}))
    },
    { 
      name: 'Afternoon Only', 
      action: () => setFilters(f => ({...f, preferAfternoon: true}))
    },
    { 
      name: 'Compact Schedule', 
      action: () => setFilters(f => ({...f, algorithm: 'compact', maxDays: 3}))
    }
  ];

  return (
    <div className="max-w-7xl mx-auto p-4">
      <h1 className="text-3xl font-bold mb-6">Advanced Course Scheduler</h1>
      
      {/* Quick Actions */}
      <div className="mb-4 flex flex-wrap gap-2">
        <button 
          onClick={() => setShowFilters(!showFilters)}
          className={`px-4 py-2 rounded font-medium ${
            showFilters ? 'bg-blue-500 text-white' : 'bg-gray-200 hover:bg-gray-300'
          }`}
        >
          {showFilters ? 'Hide' : 'Show'} Advanced Filters
        </button>
        
        {quickFilters.map((filter, idx) => (
          <button
            key={idx}
            onClick={filter.action}
            className="px-3 py-2 bg-green-100 hover:bg-green-200 text-green-800 rounded text-sm"
          >
            {filter.name}
          </button>
        ))}
        
        <button
          onClick={resetFilters}
          className="px-3 py-2 bg-red-100 hover:bg-red-200 text-red-800 rounded text-sm"
        >
          Reset All
        </button>
      </div>

      {/* Filter Panel */}
      {showFilters && <FilterPanel />}

      {/* Results Summary */}
      <div className="mb-6 p-4 bg-blue-50 rounded-lg">
        <h3 className="font-semibold mb-2">Results Summary</h3>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
          <div>
            <strong>Total Plans Found:</strong> {generateSchedules.length}
          </div>
          <div>
            <strong>Algorithm:</strong> {filters.algorithm === 'all' ? 'All Valid' : 
              filters.algorithm === 'compact' ? 'Compact (≤3 days)' :
              filters.algorithm === 'balanced' ? 'Balanced (4-5 days)' :
              'Preferred Faculty'
            }
          </div>
          <div>
            <strong>Day Range:</strong> {filters.minDays}-{filters.maxDays} days
          </div>
          <div>
            <strong>Showing:</strong> {Math.min(generateSchedules.length, filters.maxResults)} plans
          </div>
        </div>
        
        {generateSchedules.length === 0 && (
          <div className="mt-3 p-3 bg-yellow-100 rounded text-yellow-800">
            <strong>No schedules found!</strong> Try relaxing your filters or check the quick filters above.
          </div>
        )}
      </div>

      {/* Color Legend */}
      <div className="mb-4 p-3 bg-gray-50 rounded">
        <strong className="text-sm">Color Legend:</strong>
        <span className="ml-4 text-sm">
          <span className="inline-block w-4 h-4 bg-blue-50 border mr-1"></span>Lab Course
          <span className="inline-block w-4 h-4 bg-green-50 border mr-1 ml-4"></span>Preferred Faculty
        </span>
      </div>

      {/* Schedule Results */}
      {generateSchedules.length > 0 && (
        <ScheduleTable schedules={generateSchedules} />
      )}
    </div>
  );
};

export default CourseScheduler;